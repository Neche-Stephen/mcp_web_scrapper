{
  "name": "Graphlit MCP Server",
  "author": "graphlit",
  "author_url": "https://github.com/graphlit",
  "category": "Knowledge & Memory",
  "license": "MIT License",
  "package_url": "https://www.npmjs.com/package/graphlit-mcp-server",
  "source_url": "https://github.com/graphlit/graphlit-mcp-server",
  "language": "TypeScript",
  "server_configuration": [
    {
      "name": "JIRA_EMAIL",
      "required": "No",
      "description": "Your Jira email for Jira data connector integration",
      "default": ""
    },
    {
      "name": "JIRA_TOKEN",
      "required": "No",
      "description": "Your Jira token for Jira data connector integration",
      "default": ""
    },
    {
      "name": "LINEAR_API_KEY",
      "required": "No",
      "description": "Your Linear API key for Linear data connector integration",
      "default": ""
    },
    {
      "name": "NOTION_API_KEY",
      "required": "No",
      "description": "Your Notion API key for Notion data connector integration",
      "default": ""
    },
    {
      "name": "SLACK_BOT_TOKEN",
      "required": "No",
      "description": "Your Slack bot token for Slack data connector integration",
      "default": ""
    },
    {
      "name": "DISCORD_BOT_TOKEN",
      "required": "No",
      "description": "Your Discord bot token for Discord data connector integration",
      "default": ""
    },
    {
      "name": "NOTION_DATABASE_ID",
      "required": "No",
      "description": "Your Notion database ID for Notion data connector integration",
      "default": ""
    },
    {
      "name": "GRAPHLIT_JWT_SECRET",
      "required": "Yes",
      "description": "Your JWT secret for signing the JWT token found in the API settings dashboard",
      "default": ""
    },
    {
      "name": "GOOGLE_EMAIL_CLIENT_ID",
      "required": "No",
      "description": "Your Google client ID for Google Mail data connector integration",
      "default": ""
    },
    {
      "name": "GRAPHLIT_ENVIRONMENT_ID",
      "required": "Yes",
      "description": "Your Graphlit environment ID found in the API settings dashboard",
      "default": ""
    },
    {
      "name": "GRAPHLIT_ORGANIZATION_ID",
      "required": "Yes",
      "description": "Your Graphlit organization ID found in the API settings dashboard",
      "default": ""
    },
    {
      "name": "GOOGLE_EMAIL_CLIENT_SECRET",
      "required": "No",
      "description": "Your Google client secret for Google Mail data connector integration",
      "default": ""
    },
    {
      "name": "GOOGLE_EMAIL_REFRESH_TOKEN",
      "required": "No",
      "description": "Your Google refresh token for Google Mail data connector integration",
      "default": ""
    },
    {
      "name": "GITHUB_PERSONAL_ACCESS_TOKEN",
      "required": "No",
      "description": "Your GitHub personal access token for GitHub data connector integration",
      "default": ""
    }
  ],
  "tools": [
    {
      "name": "retrieveSources",
      "description": "Find relevant content sources from Graphlit's knowledge base using a search prompt, with optional filters for recency, content type, file type, feeds, or collections. Returns ranked sources with URIs for retrieval.",
      "instructions": "Retrieve relevant content sources from Graphlit knowledge base. Do not use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'.\n    Accepts a search prompt, optional recency filter (defaults to all time), and optional content type and file type filters.\n    Also accepts optional feed and collection identifiers to filter content by.\n    Prompt should be optimized for vector search, via text embeddings. Rewrite prompt as appropriate for higher relevance to search results.\n    Returns the ranked content sources, including their content resource URI to retrieve the complete Markdown text.",
      "jsonSchema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "collections": {
            "description": "Collection identifiers to filter content by, optional.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentType": {
            "description": "Content type filter, optional. One of: Email, Event, File, Issue, Message, Page, Post, Text.",
            "enum": [
              "EMAIL",
              "EVENT",
              "FILE",
              "ISSUE",
              "MESSAGE",
              "PAGE",
              "POST",
              "TEXT"
            ],
            "type": "string"
          },
          "feeds": {
            "description": "Feed identifiers to filter content by, optional.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fileType": {
            "description": "File type filter, optional. One of: Animation, Audio, Code, Data, Document, Drawing, Email, Geometry, Image, Package, PointCloud, Shape, Video.",
            "enum": [
              "ANIMATION",
              "AUDIO",
              "CODE",
              "DATA",
              "DOCUMENT",
              "DRAWING",
              "EMAIL",
              "GEOMETRY",
              "IMAGE",
              "MANIFEST",
              "PACKAGE",
              "POINT_CLOUD",
              "SHAPE",
              "UNKNOWN",
              "VIDEO"
            ],
            "type": "string"
          },
          "inLast": {
            "description": "Recency filter for content 'in last' timespan, optional. Should be ISO 8601 format, for example, 'PT1H' for last hour, 'P1D' for last day, 'P7D' for last week, 'P30D' for last month. Doesn't support weeks or months explicitly.",
            "type": "string"
          },
          "prompt": {
            "description": "Search prompt for content retrieval.",
            "type": "string"
          }
        },
        "required": [
          "prompt"
        ],
        "type": "object"
      }
    },
    {
      "name": "extractText",
      "description": "Extracts structured JSON data from unstructured text using a specified JSON schema and LLM. Specify a prompt to guide extraction and obtain formatted data output.",
      "instructions": "Extracts JSON data from text using LLM.\n    Accepts text to be extracted, and JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields.\n    Optionally accepts text prompt which is provided to LLM to guide data extraction. Defaults to 'Extract data using the tools provided'.\n    Returns extracted JSON from text.",
      "jsonSchema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "prompt": {
            "description": "Text prompt which is provided to LLM to guide data extraction, optional.",
            "type": "string"
          },
          "schema": {
            "description": "JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields.",
            "type": "string"
          },
          "text": {
            "description": "Text to be extracted with LLM.",
            "type": "string"
          }
        },
        "required": [
          "text",
          "schema"
        ],
        "type": "object"
      }
    },
    {
      "name": "createCollection",
      "description": "Organize and group content by creating a named collection. Add specific content identifiers to the collection for easy management and retrieval within a Graphlit MCP project.",
      "instructions": "Create a collection.\n    Accepts a collection name, and optional list of content identifiers to add to collection.\n    Returns the collection identifier",
      "jsonSchema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "contents": {
            "description": "Content identifiers to add to collection, optional.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Collection name.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      }
    },
    {
      "name": "addContentsToCollection",
      "description": "Insert content identifiers into a specified collection on the Graphlit MCP Server. Use this tool to organize and manage content within collections for efficient retrieval and knowledge management.",
      "instructions": "Add contents to a collection.\n    Accepts a collection identifier and a list of content identifiers to add to collection.\n    Returns the collection identifier.",
      "jsonSchema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "contents": {
            "description": "Content identifiers to add to collection.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Collection identifier.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "contents"
        ],
        "type": "object"
      }
    },
    {
      "name": "removeContentsFromCollection",
      "error": "Attempted to use detached Frame '2D9017B55D99547016152072BAD60B3C'.",
      "partial_data": true
    }
  ],
  "scrape_source": "https://glama.ai/mcp/servers/@graphlit/graphlit-mcp-server",
  "version": "1.0.0",
  "keywords": [
    "Graphlit",
    "API",
    "LLM",
    "AI",
    "RAG",
    "OpenAI",
    "PDF",
    "parsing",
    "preprocessing",
    "memory",
    "agents",
    "agent tools",
    "retrieval",
    "web scraping",
    "knowledge graph",
    "MCP"
  ]
}