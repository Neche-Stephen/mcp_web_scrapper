{
  "name": "Bankless Onchain MCP Server",
  "author": "Bankless",
  "author_url": "https://github.com/Bankless",
  "category": "Databases",
  "license": "",
  "package_url": "https://www.npmjs.com/package/@bankless/onchain-mcp",
  "source_url": "https://github.com/bankless/onchain-mcp",
  "language": "TypeScript",
  "server_configuration": [
    {
      "name": "BANKLESS_API_TOKEN",
      "required": "Yes",
      "description": "Your Bankless API token",
      "default": ""
    }
  ],
  "tools": [
    {
      "name": "read_contract",
      "description": "Read and decode blockchain contract states by specifying contract addresses, methods, input parameters, and expected output types, ensuring accurate data retrieval for nested structs and tuples.",
      "instructions": "Read contract state from a blockchain. important:              In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\n\nExample: \nstruct DataTypeA {\nDataTypeB b;\n//the liquidity index. Expressed in ray\nuint128 liquidityIndex;\n}\n\nstruct DataTypeB {\naddress token;\n}\n\nresults in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\"type\": \"address\"}, {\"type\": \"uint128\"}]",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"contract\": { \"description\": \"The contract address\", \"type\": \"string\" }, \"inputs\": { \"description\": \"Input parameters for the method call\", \"items\": { \"additionalProperties\": false, \"properties\": { \"type\": { \"description\": \"The type of the input parameter\", \"type\": \"string\" }, \"value\": { \"description\": \"The value of the input parameter\" } }, \"required\": [ \"type\" ], \"type\": \"object\" }, \"type\": \"array\" }, \"method\": { \"description\": \"The contract method to call\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" }, \"outputs\": { \"description\": \"Expected output types for the method call. \\n In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\\n \\n Example: \\n struct DataTypeA {\\n DataTypeB b;\\n //the liquidity index. Expressed in ray\\n uint128 liquidityIndex;\\n }\\n \\n struct DataTypeB {\\n address token;\\n }\\n \\n results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\\\"type\\\": \\\"address\\\"}, {\\\"type\\\": \\\"uint128\\\"}]\\n \", \"items\": { \"additionalProperties\": false, \"properties\": { \"components\": { \"description\": \"optional components for tuple types\", \"items\": { \"$ref\": \"#/properties/outputs/items\" }, \"type\": \"array\" }, \"type\": { \"description\": \"Expected output types for the method call. \\n In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\\n \\n Example: \\n struct DataTypeA {\\n DataTypeB b;\\n //the liquidity index. Expressed in ray\\n uint128 liquidityIndex;\\n }\\n \\n struct DataTypeB {\\n address token;\\n }\\n \\n results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\\\"type\\\": \\\"address\\\"}, {\\\"type\\\": \\\"uint128\\\"}]\\n \", \"type\": \"string\" } }, \"required\": [ \"type\" ], \"type\": \"object\" }, \"type\": \"array\" } }, \"required\": [ \"network\", \"contract\", \"method\", \"inputs\", \"outputs\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_proxy",
      "description": "Retrieve the proxy contract address for a specified network and contract using the Bankless Onchain MCP Server. Enables interaction with proxy implementations for blockchain contracts.",
      "instructions": "Gets the proxy address for a given network and contract",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"contract\": { \"description\": \"The contract address to request the proxy implementation contract for\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"contract\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_abi",
      "description": "Retrieves the Application Binary Interface (ABI) for a specified smart contract on a given blockchain network, enabling interaction with contract functions and data.",
      "instructions": "Gets the ABI for a given contract on a specific network",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"contract\": { \"description\": \"The contract address\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"contract\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_source",
      "description": "Retrieve contract source code from specified blockchain networks using address and network parameters, enabling direct access to smart contract data.",
      "instructions": "Gets the source code for a given contract on a specific network",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"contract\": { \"description\": \"The contract address\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"contract\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_events",
      "description": "Retrieve event logs from blockchain networks by specifying contract addresses, topics, and block ranges. Filter data to access targeted on-chain activity for analysis or monitoring.",
      "instructions": "Fetches event logs for a given network and filter criteria",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"addresses\": { \"description\": \"List of contract addresses to filter events\", \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"fromBlock\": { \"description\": \"Block number to start fetching logs from\", \"type\": \"number\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" }, \"optionalTopics\": { \"description\": \"Optional additional topics\", \"items\": { \"type\": [ \"string\", \"null\" ] }, \"type\": \"array\" }, \"toBlock\": { \"description\": \"Block number to stop fetching logs at\", \"type\": \"number\" }, \"topic\": { \"description\": \"Primary topic to filter events\", \"type\": \"string\" } }, \"required\": [ \"network\", \"addresses\", \"topic\" ], \"type\": \"object\" }"
    },
    {
      "name": "build_event_topic",
      "description": "Generate event topic signatures for blockchain events by specifying event names and argument types, enabling precise event filtering and retrieval across networks.",
      "instructions": "Builds an event topic signature based on event name and arguments",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"arguments\": { \"description\": \"Event arguments types\", \"items\": { \"additionalProperties\": false, \"properties\": { \"components\": { \"description\": \"optional components for tuple types\", \"items\": { \"$ref\": \"#/properties/arguments/items\" }, \"type\": \"array\" }, \"type\": { \"description\": \"Expected output types for the method call. \\n In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\\n \\n Example: \\n struct DataTypeA {\\n DataTypeB b;\\n //the liquidity index. Expressed in ray\\n uint128 liquidityIndex;\\n }\\n \\n struct DataTypeB {\\n address token;\\n }\\n \\n results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\\\"type\\\": \\\"address\\\"}, {\\\"type\\\": \\\"uint128\\\"}]\\n \", \"type\": \"string\" } }, \"required\": [ \"type\" ], \"type\": \"object\" }, \"type\": \"array\" }, \"name\": { \"description\": \"Event name (e.g., \\\"Transfer(address,address,uint256)\\\")\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"name\", \"arguments\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_transaction_history_for_user",
      "description": "Retrieve transaction history for a user on a specified blockchain network, optionally filter by contract, method ID, or block range, and include transaction data. Integrates with Bankless Onchain MCP Server for secure data access.",
      "instructions": "Gets transaction history for a user and optional contract",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"contract\": { \"description\": \"The contract address (optional)\", \"type\": [ \"string\", \"null\" ] }, \"includeData\": { \"default\": true, \"description\": \"Whether to include transaction data\", \"type\": \"boolean\" }, \"methodId\": { \"description\": \"The method ID to filter by (optional)\", \"type\": [ \"string\", \"null\" ] }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" }, \"startBlock\": { \"description\": \"The starting block number (optional)\", \"type\": [ \"string\", \"null\" ] }, \"user\": { \"description\": \"The user address\", \"type\": \"string\" } }, \"required\": [ \"network\", \"user\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_transaction_info",
      "description": "Retrieve detailed transaction data from blockchain networks using the transaction hash and specified network to analyze and verify onchain activity.",
      "instructions": "Gets detailed information about a specific transaction",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"polygon\\\")\", \"type\": \"string\" }, \"txHash\": { \"description\": \"The transaction hash to fetch details for\", \"type\": \"string\" } }, \"required\": [ \"network\", \"txHash\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_token_balances_on_network",
      "description": "Retrieve token balances for a specific address on a chosen blockchain network using the Bankless Onchain MCP Server. Input the address and network to access detailed token holdings.",
      "instructions": "Gets all token balances for a given address on a specific network",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"address\": { \"description\": \"The address to check token balances for\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"address\" ], \"type\": \"object\" }"
    },
    {
      "name": "get_block_info",
      "description": "Retrieve detailed information about a specific blockchain block by providing its number or hash and specifying the network. Enhances analysis and tracking of onchain data.",
      "instructions": "Gets detailed information about a specific block by number or hash",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"blockId\": { \"description\": \"The block number or block hash to fetch information for\", \"type\": \"string\" }, \"network\": { \"description\": \"The blockchain network (e.g., \\\"ethereum\\\", \\\"base\\\")\", \"type\": \"string\" } }, \"required\": [ \"network\", \"blockId\" ], \"type\": \"object\" }"
    }
  ],
  "scrape_source": "https://glama.ai/mcp/servers/@Bankless/onchain-mcp",
  "version": "1.0.6",
  "keywords": []
}