{
  "name": "mcp-sqlalchemy",
  "author": "OpenLinkSoftware",
  "author_url": "https://github.com/OpenLinkSoftware",
  "category": "Databases",
  "license": "Apache 2.0",
  "package_url": "",
  "source_url": "https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server",
  "language": "Python",
  "server_configuration": [
    {
      "name": "DB_URL",
      "required": "Yes",
      "description": "SQLAlchemy URL for database connection (e.g., virtuoso+pyodbc://user:password@VOS)",
      "default": ""
    }
  ],
  "tools": [
    {
      "name": "podbc_get_schemas",
      "description": "Retrieve a list of all schema names from a connected database using SQLAlchemy via pyodbc, enabling efficient database schema management.",
      "instructions": "Retrieve and return a list of all schema names from the connected database.",
      "jsonSchema": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Url"
          }
        },
        "title": "podbc_get_schemasArguments",
        "type": "object"
      }
    },
    {
      "name": "podbc_get_tables",
      "description": "Retrieve a list of tables and their details from a specified database schema using SQLAlchemy connectivity. Automatically defaults to the connection schema if none is provided.",
      "instructions": "Retrieve and return a list containing information about tables in specified schema, if empty uses connection default",
      "jsonSchema": {
        "properties": {
          "Schema": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Schema"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Url"
          }
        },
        "title": "podbc_get_tablesArguments",
        "type": "object"
      }
    },
    {
      "name": "podbc_describe_table",
      "description": "Retrieve table definitions, including column names, data types, and keys, from any SQLAlchemy-accessible DBMS using the MCP server's pyodbc connectivity.",
      "instructions": "Retrieve and return a dictionary containing the definition of a table, including column names, data types, nullable, autoincrement, primary key, and foreign keys.",
      "jsonSchema": {
        "properties": {
          "Schema": {
            "title": "Schema",
            "type": "string"
          },
          "table": {
            "title": "Table",
            "type": "string"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Url"
          }
        },
        "required": [
          "Schema",
          "table"
        ],
        "title": "podbc_describe_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "podbc_filter_table_names",
      "description": "Filter and retrieve table names containing a specific substring from any DBMS using SQLAlchemy connectivity via pyodbc, returning schema and table details in a structured list.",
      "instructions": "Retrieve and return a list containing information about tables whose names contain the substring 'q' in the format [{'schema': 'schema_name', 'table': 'table_name'}, {'schema': 'schema_name', 'table': 'table_name'}].",
      "jsonSchema": {
        "properties": {
          "q": {
            "title": "Q",
            "type": "string"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Url"
          }
        },
        "required": [
          "q"
        ],
        "title": "podbc_filter_table_namesArguments",
        "type": "object"
      }
    },
    {
      "name": "podbc_execute_query",
      "error": "Attempted to use detached Frame 'A3266B850FAC05FBDFE845D8404F8E83'.",
      "partial_data": true
    }
  ],
  "scrape_source": "https://glama.ai/mcp/servers/@OpenLinkSoftware/mcp-sqlalchemy-server",
  "version": "0.3.1",
  "keywords": []
}