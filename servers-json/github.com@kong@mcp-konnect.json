{
  "name": "Kong Konnect MCP Server",
  "author": "Kong",
  "author_url": "https://github.com/Kong",
  "category": "Monitoring",
  "license": "Apache 2.0",
  "package_url": "",
  "source_url": "https://github.com/kong/mcp-konnect",
  "language": "TypeScript",
  "server_configuration": [
    {
      "name": "KONNECT_REGION",
      "required": "No",
      "description": "The API region to use (possible values: US, EU, AU, ME, IN)",
      "default": "us"
    },
    {
      "name": "KONNECT_ACCESS_TOKEN",
      "required": "Yes",
      "description": "Your Kong Konnect API key",
      "default": ""
    }
  ],
  "tools": [
    {
      "name": "query_api_requests",
      "description": "Query and analyze API requests managed by Kong Konnect Gateway using customizable filters for time range, status codes, HTTP methods, and more. Retrieve detailed request data including latency, consumer IDs, and service routes.",
      "instructions": "Query and analyze Kong API Gateway requests with customizable filters. \nBefore calling this it's necessary to have a controlPlaneID and a serviceID or routeID. \nThese can be obtained using the list-control-planes, list-services, and list-routes tools.INPUT:timeRange: String - Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D)statusCodes: Number[] (optional) - Filter by specific HTTP status codesexcludeStatusCodes: Number[] (optional) - Exclude specific HTTP status codeshttpMethods: String[] (optional) - Filter by HTTP methods (e.g., GET, POST)consumerIds: String[] (optional) - Filter by consumer IDsserviceIds: String[] (optional) - Filter by service IDs. The format of this field must be \"<controlPlaneID>:<serviceID>\". routeIds: String[] (optional) - Filter by route IDs. The format of this field must be \"controlPlaneID:routeID\"maxResults: Number - Maximum number of results to return (1-1000)OUTPUT:metadata: Object - Contains totalRequests, timeRange, and applied filtersrequests: Array - List of request objects with details including:requestId: String - Unique request identifiertimestamp: String - When the request occurredhttpMethod: String - HTTP method used (GET, POST, etc.)uri: String - Request URI pathstatusCode: Number - HTTP status code of the responseconsumerId: String - ID of the consumer making the requestserviceId: String - ID of the service handling the requestrouteId: String - ID of the matched routelatency: Object - Response time metricsclientIp: String - IP address of the clientand many more detailed fields...",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"consumerIds\": { \"description\": \"Filter by consumer IDs\", \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"excludeStatusCodes\": { \"description\": \"Exclude specific HTTP status codes (e.g. [400, 401, 500])\", \"items\": { \"maximum\": 599, \"minimum\": 100, \"type\": \"integer\" }, \"type\": \"array\" }, \"httpMethods\": { \"description\": \"Filter by HTTP methods (e.g. ['GET', 'POST', 'DELETE'])\", \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"maxResults\": { \"default\": 100, \"description\": \"Number of items to return per page\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" }, \"routeIds\": { \"description\": \"Filter by route IDs (from list-routes tool)\", \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"serviceIds\": { \"description\": \"Filter by service IDs\", \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"statusCodes\": { \"description\": \"Filter by specific HTTP status codes (e.g. [200, 201, 404])\", \"items\": { \"maximum\": 599, \"minimum\": 100, \"type\": \"integer\" }, \"type\": \"array\" }, \"timeRange\": { \"default\": \"1H\", \"description\": \"Time range for data retrieval (15M = 15 minutes, 1H = 1 hour, etc.)\", \"enum\": [ \"15M\", \"1H\", \"6H\", \"12H\", \"24H\", \"7D\" ], \"type\": \"string\" } }, \"type\": \"object\" }"
    },
    {
      "name": "get_consumer_requests",
      "description": "Retrieve and analyze API requests by a specific consumer using consumer ID, time range, and filters for success or failure to gain insights into usage patterns and performance metrics.",
      "instructions": "Retrieve and analyze API requests made by a specific consumer.INPUT:consumerId: String - ID of the consumer to analyze. The format of this field must be \"controlPlaneID:consumerId\".timeRange: String - Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D)successOnly: Boolean - Filter to only show successful (2xx) requests (default: false)failureOnly: Boolean - Filter to only show failed (non-2xx) requests (default: false)maxResults: Number - Maximum number of results to return (1-1000)OUTPUT:metadata: Object - Contains consumerId, totalRequests, timeRange, and filtersstatistics: Object - Usage statistics including:averageLatencyMs: Number - Average response time in millisecondssuccessRate: Number - Percentage of successful requestsstatusCodeDistribution: Array - Breakdown of requests by status codeserviceDistribution: Array - Breakdown of requests by servicerequests: Array - List of requests with details for each request",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"consumerId\": { \"description\": \"Consumer ID to filter by (obtainable from analyze-failed-requests or query-api-requests tools)\", \"type\": \"string\" }, \"failureOnly\": { \"default\": false, \"description\": \"Show only failed (non-2xx) requests\", \"type\": \"boolean\" }, \"maxResults\": { \"default\": 100, \"description\": \"Number of items to return per page\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" }, \"successOnly\": { \"default\": false, \"description\": \"Show only successful (2xx) requests\", \"type\": \"boolean\" }, \"timeRange\": { \"default\": \"1H\", \"description\": \"Time range for data retrieval (15M = 15 minutes, 1H = 1 hour, etc.)\", \"enum\": [ \"15M\", \"1H\", \"6H\", \"12H\", \"24H\", \"7D\" ], \"type\": \"string\" } }, \"required\": [ \"consumerId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_services",
      "description": "Retrieve and manage a list of services associated with a control plane, including details like ID, host, port, protocol, and timeouts. Supports pagination for efficient data handling.",
      "instructions": "List all services associated with a control plane.INPUT:controlPlaneId: String - ID of the control planesize: Number - Number of services to return (1-1000, default: 100)offset: String (optional) - Pagination offset token from previous responseOUTPUT:metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCountservices: Array - List of services with details for each including:serviceId: String - Unique identifier for the servicename: String - Display name of the servicehost: String - Target host for the serviceport: Number - Target port for the serviceprotocol: String - Protocol used (http, https, grpc, etc.)path: String - Path prefix for the serviceretries: Number - Number of retries on failureconnectTimeout: Number - Connection timeout in millisecondswriteTimeout: Number - Write timeout in millisecondsreadTimeout: Number - Read timeout in millisecondstags: Array - Tags associated with the serviceenabled: Boolean - Whether the service is enabledmetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for further analysis",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control Plane ID (obtainable from list-control-planes tool)\", \"type\": \"string\" }, \"offset\": { \"description\": \"Offset token for pagination (from previous response)\", \"type\": \"string\" }, \"size\": { \"default\": 100, \"description\": \"Number of services to return\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_routes",
      "description": "Retrieve and manage routes linked to a control plane using controlPlaneId, size, and offset inputs. Output includes route details like protocols, methods, hosts, paths, and associated service IDs for effective configuration and analysis.",
      "instructions": "List all routes associated with a control plane.INPUT:controlPlaneId: String - ID of the control planesize: Number - Number of routes to return (1-1000, default: 100)offset: String (optional) - Pagination offset token from previous responseOUTPUT:metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCountroutes: Array - List of routes with details for each including:routeId: String - Unique identifier for the routename: String - Display name of the routeprotocols: Array - Protocols this route accepts (http, https, grpc, etc.)methods: Array - HTTP methods this route acceptshosts: Array - Hostnames this route matchespaths: Array - URL paths this route matchesstripPath: Boolean - Whether to strip the matched path prefixpreserveHost: Boolean - Whether to preserve the host headerserviceId: String - ID of the service this route forwards toenabled: Boolean - Whether the route is enabledmetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for further analysis",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control Plane ID (obtainable from list-control-planes tool)\", \"type\": \"string\" }, \"offset\": { \"description\": \"Offset token for pagination (from previous response)\", \"type\": \"string\" }, \"size\": { \"default\": 100, \"description\": \"Number of routes to return\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_consumers",
      "description": "Retrieve and manage a list of consumers associated with a specific control plane in Kong Konnect, including details like consumer IDs, usernames, and custom IDs, with pagination support for efficient data handling.",
      "instructions": "List all consumers associated with a control plane.INPUT:controlPlaneId: String - ID of the control planesize: Number - Number of consumers to return (1-1000, default: 100)offset: String (optional) - Pagination offset token from previous responseOUTPUT:metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCountconsumers: Array - List of consumers with details for each including:consumerId: String - Unique identifier for the consumerusername: String - Username for this consumercustomId: String - Custom identifier for this consumertags: Array - Tags associated with the consumerenabled: Boolean - Whether the consumer is enabledmetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for consumer analysis",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control Plane ID (obtainable from list-control-planes tool)\", \"type\": \"string\" }, \"offset\": { \"description\": \"Offset token for pagination (from previous response)\", \"type\": \"string\" }, \"size\": { \"default\": 100, \"description\": \"Number of consumers to return\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_plugins",
      "description": "Retrieve and manage plugins associated with a control plane in Kong Konnect. Returns details like plugin ID, name, configuration, and scope, enabling efficient plugin oversight and configuration.",
      "instructions": "List all plugins associated with a control plane.INPUT:controlPlaneId: String - ID of the control planesize: Number - Number of plugins to return (1-1000, default: 100)offset: String (optional) - Pagination offset token from previous responseOUTPUT:metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCountplugins: Array - List of plugins with details for each including:pluginId: String - Unique identifier for the pluginname: String - Name of the plugin (e.g., rate-limiting, cors, etc.)enabled: Boolean - Whether the plugin is enabledconfig: Object - Plugin-specific configurationprotocols: Array - Protocols this plugin applies totags: Array - Tags associated with the pluginscoping: Object - Defines plugin scope including:consumerId: String - Consumer this plugin applies to (if any)serviceId: String - Service this plugin applies to (if any)routeId: String - Route this plugin applies to (if any)global: Boolean - Whether this is a global pluginmetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for plugin configuration",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control Plane ID (obtainable from list-control-planes tool)\", \"type\": \"string\" }, \"offset\": { \"description\": \"Offset token for pagination (from previous response)\", \"type\": \"string\" }, \"size\": { \"default\": 100, \"description\": \"Number of plugins to return\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_control_planes",
      "description": "Retrieve and filter a list of control planes in your organization, including details like name, type, endpoints, and labels, with options for pagination and sorting.",
      "instructions": "List all control planes in your organization.INPUT:pageSize: Number - Number of control planes per page (1-1000, default: 10)pageNumber: Number (optional) - Page number to retrievefilterName: String (optional) - Filter control planes by namefilterClusterType: String (optional) - Filter by cluster type (kubernetes, docker, etc.)filterCloudGateway: Boolean (optional) - Filter by cloud gateway capabilitylabels: String (optional) - Filter by labels (format: 'key:value,existCheck')sort: String (optional) - Sort field and direction (e.g. 'name,created_at desc')OUTPUT:metadata: Object - Contains pageSize, pageNumber, totalPages, totalCount, filters, sortcontrolPlanes: Array - List of control planes with details for each including:controlPlaneId: String - Unique identifier for the control planename: String - Display name of the control planedescription: String - Description of the control planetype: String - Type of the control planeclusterType: String - Underlying cluster typecontrolPlaneEndpoint: String - URL endpoint for the control planetelemetryEndpoint: String - URL endpoint for telemetryhasCloudGateway: Boolean - Whether cloud gateway is enabledlabels: Object - Labels assigned to this control planemetadata: Object - Creation and update timestampsusage: Object - Information about how to use these results",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"filterCloudGateway\": { \"description\": \"Filter by cloud gateway capability\", \"type\": \"boolean\" }, \"filterClusterType\": { \"description\": \"Filter by cluster type (e.g., 'kubernetes', 'docker')\", \"type\": \"string\" }, \"filterName\": { \"description\": \"Filter control planes by name (contains)\", \"type\": \"string\" }, \"labels\": { \"description\": \"Filter by labels (format: 'key:value,existCheck')\", \"type\": \"string\" }, \"pageNumber\": { \"description\": \"Page number to retrieve\", \"minimum\": 1, \"type\": \"integer\" }, \"pageSize\": { \"default\": 10, \"description\": \"Number of control planes per page\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" }, \"sort\": { \"description\": \"Sort field and direction (e.g. 'name,created_at desc')\", \"type\": \"string\" } }, \"type\": \"object\" }"
    },
    {
      "name": "get_control_plane",
      "description": "Retrieve detailed information about a specific control plane in Kong Konnect MCP Server, including ID, name, type, endpoints, and related tools, by providing its controlPlaneId.",
      "instructions": "Get detailed information about a specific control plane.INPUT:controlPlaneId: String - ID of the control plane to retrieveOUTPUT:controlPlaneDetails: Object - Detailed information including:controlPlaneId: String - Unique identifier for the control planename: String - Display name of the control planedescription: String - Description of the control planetype: String - Type of the control planeclusterType: String - Underlying cluster typecontrolPlaneEndpoint: String - URL endpoint for the control planetelemetryEndpoint: String - URL endpoint for telemetryhasCloudGateway: Boolean - Whether cloud gateway is enabledlabels: Object - Labels assigned to this control planemetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for further analysis",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control Plane ID (obtainable from list-control-planes tool)\", \"type\": \"string\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    },
    {
      "name": "list_control_plane_group_memberships",
      "description": "Retrieve detailed information about all member control planes within a specific control plane group, including their IDs, names, descriptions, types, and membership statuses, with pagination support for efficient data retrieval.",
      "instructions": "List all control planes that are members of a specific control plane group.INPUT:groupId: String - ID of the control plane group (control plane that acts as the group)pageSize: Number - Number of members to return per page (1-1000, default: 10)pageAfter: String (optional) - Cursor for pagination after a specific itemOUTPUT:metadata: Object - Contains groupId, pageSize, pageAfter, nextPageAfter, totalCountmembers: Array - List of member control planes with details for each including:controlPlaneId: String - Unique identifier for the control planename: String - Display name of the control planedescription: String - Description of the control planetype: String - Type of the control planeclusterType: String - Underlying cluster typemembershipStatus: Object - Group membership status including:status: String - Current status (OK, CONFLICT, etc.)message: String - Status messageconflicts: Array - List of configuration conflicts if anymetadata: Object - Creation and update timestampsrelatedTools: Array - List of related tools for group management",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"groupId\": { \"description\": \"Control plane group ID (the ID of the control plane that acts as the group)\", \"type\": \"string\" }, \"pageAfter\": { \"description\": \"Cursor for pagination after a specific item\", \"type\": \"string\" }, \"pageSize\": { \"default\": 10, \"description\": \"Number of members to return per page\", \"maximum\": 1000, \"minimum\": 1, \"type\": \"integer\" } }, \"required\": [ \"groupId\" ], \"type\": \"object\" }"
    },
    {
      "name": "check_control_plane_group_membership",
      "description": "Verify control plane group membership by checking if a specific control plane belongs to any group, retrieving membership details, status, and configuration conflicts.",
      "instructions": "Check if a control plane is a member of any group.INPUT:controlPlaneId: String - ID of the control plane to checkOUTPUT:controlPlaneId: String - ID of the control plane that was checkedgroupMembership: Object - Membership information including:isMember: Boolean - Whether the control plane is a member of any groupgroupId: String - ID of the group this control plane belongs to (if any)groupName: String - Name of the group this control plane belongs tostatus: String - Membership status (OK, CONFLICT, etc.)message: String - Status messageconflicts: Array - List of configuration conflicts if anyrelatedTools: Array - List of related tools for group management",
      "jsonSchema": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"additionalProperties\": false, \"properties\": { \"controlPlaneId\": { \"description\": \"Control plane ID to check (can be obtained from list-control-planes tool)\", \"type\": \"string\" } }, \"required\": [ \"controlPlaneId\" ], \"type\": \"object\" }"
    }
  ],
  "scrape_source": "https://glama.ai/mcp/servers/@Kong/mcp-konnect",
  "version": "1.0.0",
  "keywords": [
    "mcp",
    "kong",
    "konnect",
    "api",
    "gateway"
  ]
}