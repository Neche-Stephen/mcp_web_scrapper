{
  "name": "OpenRouter MCP Server",
  "author": "heltonteixeira",
  "author_url": "https://github.com/heltonteixeira",
  "category": "Developer Tools",
  "license": "Apache 2.0",
  "package_url": "https://www.npmjs.com/package/@mcpservers/openrouterai",
  "source_url": "https://github.com/heltonteixeira/openrouterai",
  "language": "TypeScript",
  "server_configuration": [
    {
      "name": "OPENROUTER_API_KEY",
      "required": "Yes",
      "description": "Your API key from OpenRouter.ai",
      "default": ""
    },
    {
      "name": "OPENROUTER_DEFAULT_MODEL",
      "required": "No",
      "description": "Optional default model to use",
      "default": ""
    }
  ],
  "tools": [
    {
      "name": "chat_completion",
      "description": "Send and receive AI-generated responses using a variety of models for conversational tasks. Integrate with OpenRouter.ai to process messages and retrieve outputs efficiently.",
      "instructions": "Send a message to OpenRouter.ai and get a response",
      "jsonSchema": "{ \"properties\": { \"messages\": { \"description\": \"An array of conversation messages with roles and content\", \"items\": { \"properties\": { \"content\": { \"description\": \"The content of the message\", \"type\": \"string\" }, \"role\": { \"description\": \"The role of the message sender\", \"enum\": [ \"system\", \"user\", \"assistant\" ], \"type\": \"string\" } }, \"required\": [ \"role\", \"content\" ], \"type\": \"object\" }, \"maxItems\": 100, \"minItems\": 1, \"type\": \"array\" }, \"model\": { \"description\": \"The model to use (e.g., \\\"google/gemini-2.0-flash-thinking-exp:free\\\", \\\"undi95/toppy-m-7b:free\\\"). If not provided, uses the default model if set.\", \"type\": \"string\" }, \"temperature\": { \"description\": \"Sampling temperature (0-2)\", \"maximum\": 2, \"minimum\": 0, \"type\": \"number\" } }, \"required\": [ \"messages\" ], \"type\": \"object\" }"
    },
    {
      "name": "search_models",
      "description": "Find and filter AI models on OpenRouter.ai by capabilities, pricing, context length, or provider. Refine results to match specific needs for completions, prompts, or tools.",
      "instructions": "Search and filter OpenRouter.ai models based on various criteria",
      "jsonSchema": "{ \"properties\": { \"capabilities\": { \"description\": \"Filter by model capabilities\", \"properties\": { \"functions\": { \"description\": \"Requires function calling capability\", \"type\": \"boolean\" }, \"json_mode\": { \"description\": \"Requires JSON mode capability\", \"type\": \"boolean\" }, \"tools\": { \"description\": \"Requires tools capability\", \"type\": \"boolean\" }, \"vision\": { \"description\": \"Requires vision capability\", \"type\": \"boolean\" } }, \"type\": \"object\" }, \"limit\": { \"description\": \"Maximum number of results to return (default: 10)\", \"maximum\": 50, \"minimum\": 1, \"type\": \"number\" }, \"maxCompletionPrice\": { \"description\": \"Maximum price per 1K tokens for completions\", \"type\": \"number\" }, \"maxContextLength\": { \"description\": \"Maximum context length in tokens\", \"type\": \"number\" }, \"maxPromptPrice\": { \"description\": \"Maximum price per 1K tokens for prompts\", \"type\": \"number\" }, \"minContextLength\": { \"description\": \"Minimum context length in tokens\", \"type\": \"number\" }, \"provider\": { \"description\": \"Filter by specific provider (e.g., \\\"anthropic\\\", \\\"openai\\\", \\\"cohere\\\")\", \"type\": \"string\" }, \"query\": { \"description\": \"Optional search query to filter by name, description, or provider\", \"type\": \"string\" } }, \"type\": \"object\" }"
    },
    {
      "name": "get_model_info",
      "description": "Retrieve detailed specifications and metadata for a specific AI model by providing its ID, enabling informed selection and usage through OpenRouter MCP Server.",
      "instructions": "Get detailed information about a specific model",
      "jsonSchema": "{ \"properties\": { \"model\": { \"description\": \"The model ID to get information for\", \"type\": \"string\" } }, \"required\": [ \"model\" ], \"type\": \"object\" }"
    },
    {
      "name": "validate_model",
      "description": "Verify the validity of a model ID using OpenRouter MCP Server to ensure compatibility and correct integration with AI models.",
      "instructions": "Check if a model ID is valid",
      "jsonSchema": "{ \"properties\": { \"model\": { \"description\": \"The model ID to validate\", \"type\": \"string\" } }, \"required\": [ \"model\" ], \"type\": \"object\" }"
    }
  ],
  "scrape_source": "https://glama.ai/mcp/servers/@heltonteixeira/openrouterai",
  "version": "2.2.0",
  "keywords": [
    "mcp",
    "openrouter",
    "ai",
    "llm",
    "modelcontextprotocol"
  ]
}